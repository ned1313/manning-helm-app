# Azure DevOps pipeline for staging deployment after published chart

# Reference variable group
variables:
- group: ado-variables
- name: kubeloginVersion
  value: 'v0.0.10'

resources:
  containers:
  - container: hello-world
    type: ACR
    azureSubscription: $(service_name)
    resourceGroup: $(azureResourceGroup)
    registry: $(acr_name)
    repository: charts/hello-world/hello-world
    trigger:
      enabled: true

stages:
# Stage that includes the build reason PullRequest
- stage: Staging
  displayName: Helm Deploy to staging
  jobs:
  - job: deploy_helm_chart
    pool:
      vmImage: ubuntu-latest
    steps:
      # Use kubelogin to log into the cluster with SP
      - bash: |

          # Download and install
          curl -LO "https://github.com/Azure/kubelogin/releases/download/$(kubeloginVersion)/kubelogin-linux-amd64.zip"
          sudo unzip -j "kubelogin-linux-amd64.zip" -d /usr/local/bin
          rm -f "kubelogin-linux-amd64.zip"
          kubelogin --version
        displayName: kubelogin - install

      - bash: |
          # Log in using stored SP
          az login \
            --service-principal \
            --username $(aad_sp_client_id) \
            --password $(aad_sp_client_secret) \
            --tenant $(aad_tenant_id)

          # Create the kubeconfig file with name of AKS cluster
          touch .kubeconfig-$(kubernetesCluster)
          chmod 600 .kubeconfig-$(kubernetesCluster)

          # Get credentials using AAD non-interactive login
          az aks get-credentials \
            --resource-group $(azureResourceGroup) \
            --name $(kubernetesCluster) \
            --overwrite-existing \
            --file .kubeconfig-$(kubernetesCluster)

          # Convert the credentials using the azure cli option
          kubelogin convert-kubeconfig -l azurecli
        displayName: create kubelogin file with azurecli
        env:
          KUBECONFIG: $(Build.SourcesDirectory)/.kubeconfig-$(kubernetesCluster)

      # Deploy to AKS cluster in staging namespace
      # Create the namespace if it doesn't exist
      - bash: |
          kubectl create namespace staging --dry-run=client -o yaml | kubectl apply -f -
        displayName: kubectl - create namespace
        env:
          KUBECONFIG: $(Build.SourcesDirectory)/.kubeconfig-$(kubernetesCluster)

      # Upgrade the helm deploy
      - bash: |

          helm registry login $(acr_login_server) \
          --username $(aad_sp_client_id) \
          --password $(aad_sp_client_secret)

          helm upgrade --install --namespace staging hello-world oci://$(acr_login_server)/$(resources.container.hello-world.repository):$(resources.container.hello-world.tag)
        displayName: Helm upgrade
        env:
          KUBECONFIG: $(Build.SourcesDirectory)/.kubeconfig-$(kubernetesCluster)
          HELM_EXPERIMENTAL_OCI: 1
