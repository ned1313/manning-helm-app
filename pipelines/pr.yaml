# Azure DevOps pipeline for pull request to main branch

# Reference variable group
variables:
- group: ado-variables

# Trigger on a PR action from GitHub on the main branch (merging to main)
# Inlcudes only the AKS config code
pr:
  branches:
    include:
    - main
  paths:
    include:
    - helmtest/

stages:
# Stage that includes the build reason PullRequest
- stage: PullRequest
  condition: eq(variables['Build.Reason'], 'PullRequest')
  displayName: Helm Package and Deploy
  jobs:
  # Job to save Helm chart to ACR
  - job: save_helm_chart
    pool:
      vmImage: ubuntu-latest
    steps:
    # Helm deploy to save chart
    - task: HelmDeploy@0
      displayName: 'Helm save'
      inputs:
        command: save
        chartNameForACR: $(acr_id).azurecr.io/charts/hello-world:$(Build.BuildNumber)
        chartPathForACR: '$(System.DefaultWorkingDirectory)/helmtest/hello-world'
        azureSubscriptionEndpointForACR: $(service_name)
        azureResourceGroupForACR: $(acr_id)
        azureContainerRegistry: $(acr_id)

  - job: deploy_helm_chart
    pool:
      vmImage: ubuntu-latest
    steps:
      # Use kubelogin to log into the cluster with SP
      - task: AzureCLI@2
        displayName: aks non-admin login using kubelogin
        inputs:
          azureSubscription: $(service_name)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az aks get-credentials -n $(kubernetesCluster) -g $(azureResourceGroup)
            kubelogin convert-kubeconfig -l msi

      # Deploy to AKS cluster in development namespace
      # First clean up any existing deployments
      - task: Kubernetes@1
        displayName: kubectl delete namespace
        inputs:
          connectionType: Azure Resource Manager
          azureSubscriptionEndpoint: $(service_name)
          azureResourceGroup: $(azureResourceGroup)
          kubernetesCluster: $(kubernetesCluster)
          useClusterAdmin: false
          command: delete
          arguments: namespace development --ignore-not-found=true

      # Next create namespace and deploy Helm chart
      - task: Kubernetes@1
        displayName: kubectl create namespace
        inputs:
          connectionType: Azure Resource Manager
          azureSubscriptionEndpoint: $(service_name)
          azureResourceGroup: $(azureResourceGroup)
          kubernetesCluster: $(kubernetesCluster)
          useClusterAdmin: false
          command: create
          arguments: namespace development

      - task: HelmDeploy@0
        displayName: Helm deploy
        inputs:
          connectionType: Azure Resource Manager
          azureSubscriptionEndpoint: $(service_name)
          azureResourceGroup: $(azureResourceGroup)
          kubernetesCluster: $(kubernetesCluster)
          namespace: development
          command: install
          chartType: FilePath
          chartPath: '$(System.DefaultWorkingDirectory)/helmtest/hello-world'