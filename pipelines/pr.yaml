# Azure DevOps pipeline for pull request to main branch

# Reference variable group
variables:
- group: ado-variables
- name: kubeloginVersion
  value: 'v0.0.10'

# Trigger on a PR action from GitHub on the main branch (merging to main)
# Inlcudes only the AKS config code
pr:
  branches:
    include:
    - main
  paths:
    include:
    - helmtest/

stages:
# Stage that includes the build reason PullRequest
- stage: PullRequest
  condition: eq(variables['Build.Reason'], 'PullRequest')
  displayName: Helm Package and Deploy
  jobs:
  # Job to save Helm chart to ACR
  - job: save_helm_chart
    pool:
      vmImage: ubuntu-latest
    steps:
    # Helm deploy to save chart
    - bash: |
        helm version

        helm registry login $(acr_id).azurecr.io \
          --username $(aad_sp_client_id) \
          --password $(aad_sp_client_secret)

        helm package '$(System.DefaultWorkingDirectory)/helmtest/hello-world' --version $(Build.BuildNumber)

        helm push '$(System.DefaultWorkingDirectory)/*.tgz' oci://$(acr_id).azurecr.io/charts/hello-world:$(Build.BuildNumber)
      displayName: 'helm - save and push'
      env:
        HELM_EXPERIMENTAL_OCI: 1

  - job: deploy_helm_chart
    pool:
      vmImage: ubuntu-latest
    steps:
      # Use kubelogin to log into the cluster with SP
      - bash: |

          # Download and install
          curl -LO "https://github.com/Azure/kubelogin/releases/download/$(kubeloginVersion)/kubelogin-linux-amd64.zip"
          sudo unzip -j "kubelogin-linux-amd64.zip" -d /usr/local/bin
          rm -f "kubelogin-linux-amd64.zip"
          kubelogin --version
        displayName: kubelogin - install

      - bash: |
          # Log in using stored SP
          az login \
            --service-principal \
            --username $(aad_sp_client_id) \
            --password $(aad_sp_client_secret) \
            --tenant $(aad_tenant_id)

          # Create the kubeconfig file with name of AKS cluster
          touch .kubeconfig-$(kubernetesCluster)
          chmod 600 .kubeconfig-$(kubernetesCluster)

          # Get credentials using AAD non-interactive login
          az aks get-credentials \
            --resource-group $(azureResourceGroup) \
            --name $(kubernetesCluster) \
            --overwrite-existing \
            --file .kubeconfig-$(kubernetesCluster)

          # Convert the credentials using the azure cli option
          kubelogin convert-kubeconfig -l azurecli
        displayName: create kubelogin file with azurecli
        env:
          KUBECONFIG: $(Build.SourcesDirectory)/.kubeconfig-$(kubernetesCluster)

      # Deploy to AKS cluster in development namespace
      # First clean up any existing deployments
      - bash: |
          kubectl delete namespace development --ignore-not-found
          kubectl create namespace development
        displayName: kubectl - delete and create namespace
        env:
          KUBECONFIG: $(Build.SourcesDirectory)/.kubeconfig-$(kubernetesCluster)

      - bash: |
          helm install --namespace development hello-world '$(System.DefaultWorkingDirectory)/helmtest/hello-world'
        displayName: Helm install
        env:
          KUBECONFIG: $(Build.SourcesDirectory)/.kubeconfig-$(kubernetesCluster)